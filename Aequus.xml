<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aequus</name>
    </assembly>
    <members>
        <member name="T:Aequus.AequusHelpers">
            <summary>
            A helper class which contains many useful methods
            </summary>
        </member>
        <member name="F:Aequus.AequusHelpers.iterations">
            <summary>
            A static integer used for counting how many iterations for an iterative process has occured. Use this to prevent infinite loops, and always be sure to reset to 0 afterwards.
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_invasionSize">
            <summary>
            Caches <see cref="F:Terraria.Main.invasionSize"/>
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_invasionType">
            <summary>
            Caches <see cref="F:Terraria.Main.invasionType"/>
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_bloodMoon">
            <summary>
            Caches <see cref="F:Terraria.Main.bloodMoon"/>
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_eclipse">
            <summary>
            Caches <see cref="F:Terraria.Main.eclipse"/>
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_dayTime">
            <summary>
            Caches <see cref="F:Terraria.Main.dayTime"/>
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.HasMouseItem">
            <summary>
            Determines whether or not the mouse has an item
            </summary>
        </member>
        <member name="M:Aequus.AequusHelpers.GetLightingSection(Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>
            Gets the mean of light surrounding a point
            </summary>
            <param name="tilePosition">The tile center</param>
            <param name="tilesSize">The size in tile coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.AequusHelpers.GetLightingSection(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the mean of light surrounding a point
            </summary>
            <param name="x">The center tile X</param>
            <param name="y">The center tile Y</param>
            <param name="tilesSize">The size in tile coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.AequusHelpers.GetLightingSection(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Gets the mean of light surrounding a point
            </summary>
            <param name="worldPosition">The center</param>
            <param name="tilesSize">The size in tile coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.AequusHelpers.FindProjectileIdentity(System.Int32,System.Int32)">
            <summary>
            Attempts to find a projectile index using the identity and owner provided. Returns -1 otherwise.
            </summary>
            <param name="owner"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="F:Aequus.AequusPlayer.moroSummonerFruit">
            <summary>
            Enabled by <see cref="T:Aequus.Items.Consumables.Moro"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.ghostTombstones">
            <summary>
            Enabled by <see cref="T:Aequus.Items.Tools.Misc.GhostlyGrave"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.buffSpicyEel">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.SpicyEelBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.buffResistHeat">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.FrostBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.eventDemonSiege">
            <summary>
            A point determining one of the close gore nests. Prioritized by their order in <see cref="P:Aequus.Biomes.DemonSiege.DemonSiegeSystem.ActiveSacrifices"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.closestEnemy">
            <summary>
            The closest 'enemy' NPC to the player. Updated in <see cref="M:Aequus.AequusPlayer.PostUpdate"/> -> <see cref="M:Aequus.AequusPlayer.ClosestEnemy"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.forceDayState">
            <summary>
            0 = no force, 1 = force day, 2 = force night
            <para>Used by <see cref="T:Aequus.Buffs.NoonBuff"/> and set to 1</para>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.scamChance">
            <summary>
            A percentage chance for a successful scam, where you don't consume money. Values below or equal 0 mean no scams, Values above or equal 1 mean 100% scam rate. Used by <see cref="T:Aequus.Items.Accessories.FaultyCoin"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.flatScamDiscount">
            <summary>
            A flat discount variable. Decreases shop prices by this amount. Used by <see cref="T:Aequus.Items.Accessories.ForgedCard"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.luckRerolls">
            <summary>
            Rerolls luck (rounded down amt of luckRerolls) times, if there is a decimal left, then it has a (luckRerolls decimal) chance of rerolling again.
            <para>Used by <see cref="T:Aequus.Items.Accessories.RabbitsFoot"/></para> 
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.grandRewardLuck">
            <summary>
            Used to increase droprates. Rerolls the drop (amt of lootluck) times, if there is a decimal left, then it has a (lootluck decimal) chance of rerolling again.
            <para>Used by <see cref="T:Aequus.Items.Accessories.GrandReward"/></para> 
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.increasedRegen">
            <summary>
            An amount of regen to add to the player
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.sentryInheritItem">
            <summary>
            Set by <see cref="T:Aequus.Items.Accessories.Summon.Sentry.SantankSentry"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.accExpertBoost">
            <summary>
            Set to true by <see cref="T:Aequus.Items.Accessories.Summon.Sentry.MechsSentry"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.accFoolsGold">
            <summary>
            Set by <see cref="T:Aequus.Items.Accessories.FoolsGoldRing"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.wearingSummonHelmet">
            <summary>
            Set to true by <see cref="T:Aequus.Items.Armor.Passive.DartTrapHat"/>, <see cref="T:Aequus.Items.Armor.Passive.SuperDartTrapHat"/>, <see cref="T:Aequus.Items.Armor.Passive.FlowerCrown"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.summonHelmetTimer">
            <summary>
            Used by summon helmets (<see cref="T:Aequus.Items.Armor.Passive.DartTrapHat"/>, <see cref="T:Aequus.Items.Armor.Passive.SuperDartTrapHat"/>, <see cref="T:Aequus.Items.Armor.Passive.FlowerCrown"/>) to time projectile spawns and such.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.skeletonKey">
            <summary>
            Set by <see cref="T:Aequus.Items.Tools.Misc.SkeletonKey"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.shadowKey">
            <summary>
            Set by <see cref="F:Terraria.ID.ItemID.ShadowKey"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.lastSelectedItem">
            <summary>
            Tracks <see cref="F:Terraria.Player.selectedItem"/>, updated in <see cref="M:Aequus.AequusPlayer.PostItemCheck"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCooldownMax">
            <summary>
            When a new cooldown is applied, this gets set to the duration of the cooldown. Does not tick down unlike <see cref="F:Aequus.AequusPlayer.itemCooldown"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCooldown">
            <summary>
            When above 0, the cooldown is active. Ticks down by 1 every player update.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCombo">
            <summary>
            When above 0, you are in a combo. Ticks down by 1 every player update.
            <para>Item "combos" are used for determining what type of item action to use.</para>
            <para>A usage example would be a weapon with a 3 swing pattern. Each swing will increase the combo meter by 60, and when it becomes greater than 120, reset to 0.</para>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemUsage">
            <summary>
            Increments when the player uses an item. Does not increment when the player is using the alt function of an item.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemSwitch">
            <summary>
            A short lived timer which gets set to 30 when the player has a different selected item.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.interactionCooldown">
            <summary>
            Used to prevent players from spam interacting with special objects which may have important networking actions which need to be awaited. Ticks down by 1 every player update.
            </summary>
        </member>
        <member name="P:Aequus.AequusPlayer.HasCooldown">
            <summary>
            Helper for whether or not the player currently has a cooldown
            </summary>
        </member>
        <member name="P:Aequus.AequusPlayer.InDanger">
            <summary>
            Helper for whether or not the player is in danger
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.UpdateBank(Terraria.Chest,System.Int32)">
            <summary>
            
            </summary>
            <param name="bank"></param>
            <param name="bankType">Types: 
            <list type="number">
            Piggy Bank
            <item>Safe</item>
            <item>Defender's Forge</item>
            <item>Void Bag</item>
            </list></param>
        </member>
        <member name="M:Aequus.AequusPlayer.ClosestEnemy">
            <summary>
            Finds the closest enemy to the player, and caches its index in <see cref="F:Terraria.Main.npc"/>
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.UpdateSentrySquid(System.Int32)">
            <summary>
            Attempts to place a sentry down near the <see cref="T:Terraria.NPC"/> at <see cref="F:Aequus.AequusPlayer.closestEnemy"/>'s index. Doesn't do anything if the index is -1, the enemy is not active, or the player has no turret slots. Runs after <see cref="M:Aequus.AequusPlayer.ClosestEnemy"/>
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.SentrySquid_GetStaff">
            <summary>
            Determines an item to use as a Sentry Staff for <see cref="M:Aequus.AequusPlayer.UpdateSentrySquid(System.Int32)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aequus.AequusPlayer.UpdateMaxZombies">
            <summary>
            If the player has too many zombies, it kills the oldest and least prioritized one.
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.NecromancyHit(Terraria.NPC,Terraria.Projectile)">
            <summary>
            Inflicts <see cref="T:Aequus.Buffs.Debuffs.SoulStolen"/> if the player is able to get more candle souls
            </summary>
            <param name="target"></param>
            <param name="proj"></param>
        </member>
        <member name="M:Aequus.AequusPlayer.PreDraw(Terraria.DataStructures.PlayerDrawSet@)">
            <summary>
            Called right before all player layers have been drawn
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Aequus.AequusPlayer.PostDraw(Terraria.DataStructures.PlayerDrawSet@)">
            <summary>
            Called right after all player layers have been drawn
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Aequus.AequusPlayer.SetCooldown(System.Int32,System.Boolean,Terraria.Item)">
            <summary>
            Sets a cooldown for the player. If the cooldown value provided is less than the player's currently active cooldown, this does nothing.
            <para>Use in combination with <see cref="P:Aequus.AequusPlayer.HasCooldown"/></para>
            </summary>
            <param name="cooldown">The amount of time the cooldown lasts in game ticks.</param>
            <param name="ignoreStats">Whether or not to ignore cooldown stats and effects. Setting this to true will prevent them from effecting this cooldown</param>
            <param name="itemReference"></param>
        </member>
        <member name="M:Aequus.AequusWorld.OreTiers">
            <summary>
            
            </summary>
            <returns>A bitsbyte instance where 0 is copper, 1 is iron, 2 is silver, 3 is gold. When they are false, they are the alternate world ore.</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasCobalt">
            <summary>
            
            </summary>
            <returns>true if the world has cobalt, false if the world has palladium, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasMythril">
            <summary>
            
            </summary>
            <returns>true if the world has mythril, false if the world has orichalcum, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasAdamantite">
            <summary>
            
            </summary>
            <returns>true if the world has adamantite, false if the world has titanium, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="T:Aequus.AequusWorld.ModCalls">
            <summary>
            World Flags:
            <list type="table">
            <item>Crabson -- <see cref="F:Aequus.AequusWorld.downedCrabson"/></item>
            <item>OmegaStarite -- <see cref="F:Aequus.AequusWorld.downedOmegaStarite"/></item>
            <item>RedSprite -- <see cref="F:Aequus.AequusWorld.downedRedSprite"/></item>
            <item>SpaceSquid -- <see cref="F:Aequus.AequusWorld.downedSpaceSquid"/></item>
            <item>DustDevil -- Warning, this flag doesn't exist yet, and will instead pull <see cref="F:Aequus.AequusWorld.downedEventAtmosphere"/></item>
            <item>GaleStreams -- <see cref="F:Aequus.AequusWorld.downedEventAtmosphere"/></item>
            </list>
            </summary>
        </member>
        <member name="M:Aequus.AequusWorld.ModCalls.HandleModCall(Aequus.Aequus,System.Object[])">
            <summary>
            Obtains or sets a world flag, a list of world flags are provided in <see cref="T:Aequus.AequusWorld.ModCalls"/>' summary.
            <para>Obtaining a flag:</para>
            <code>aequus.Call("Downed", "Crabson" -- {Or any of the flag names provided})</code>
            <para>Setting a flag:</para>
            <code>aequus.Call("Downed", "Set", "Crabson" -- {Or any of the flag names provided}, {true/false})</code>
            </summary>
            <param name="aequus"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Biomes.DemonSiege.DemonSiegeSystem.FindDemonSiege(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds and returns the closest demon siege
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aequus.Buffs.Pets.FamiliarBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Pets.FamiliarPickaxe"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.OmegaStariteBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Pets.DragonBall"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.RedSpriteBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Pets.LightningRod"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.SpaceSquidBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Pets.ToySpaceGun"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.TorraBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Pets.SwagLookingEye"/>
            </summary>
        </member>
        <member name="M:Aequus.Common.ILoadBefore.SortBefore(System.Type)">
            <summary>
            
            </summary>
            <param name="t">The loadable type. EX: <see cref="T:Aequus.Common.IOnModLoad"/></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Common.ILoadAfter.SortAfter(System.Type)">
            <summary>
            
            </summary>
            <param name="t">The loadable type. EX: <see cref="T:Aequus.Common.IOnModLoad"/></param>
            <returns></returns>
        </member>
        <member name="F:Aequus.Content.CarpenterBounties.CarpenterBounty.ConditionInfo.Carpenter">
            <summary>
            Carpenter town NPC that the player is talking to. If the player is not talking to a carpenter, this is set to null.
            </summary>
        </member>
        <member name="M:Aequus.Content.CarpenterBounties.CarpenterBounty.CheckConditions(Aequus.Content.CarpenterBounties.CarpenterBounty.ConditionInfo,System.String@)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="message">Translated message that will either pop up in chat or be put into the carpenter's dialogue</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.CrossMod.IModCallable.UnboxIntoInt(System.Object)">
            <summary>
            Attempts to unbox an <see cref="T:System.Object"/> into an <see cref="T:System.Int32"/>
            <para>Accepts <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>,
            <see cref="T:System.UInt16"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Single"/>, and <see cref="T:System.Double"/>.</para>
            </summary>
            <param name="obj"></param>
            <returns>-1 by default. An <see cref="T:System.Int32"/> representation of the object otherwise</returns>
        </member>
        <member name="M:Aequus.Content.CrossMod.IModCallable.UnboxIntoFloat(System.Object)">
            <summary>
            Attempts to unbox an <see cref="T:System.Object"/> into an <see cref="T:System.Int32"/>
            <para>Accepts <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>,
            <see cref="T:System.UInt16"/>, and <see cref="T:System.Int16"/></para>
            </summary>
            <param name="obj"></param>
            <returns>-1 by default. An <see cref="T:System.Int32"/> representation of the object otherwise</returns>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.Invalid">
            <summary>
            For enemies which cannot be turned into player zombies
            </summary>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.One">
            <summary>
            Tier for pre-Evil enemies
            </summary>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.Two">
            <summary>
            Tier for post-Evils/Skeletron/Underworld enemies
            </summary>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.Three">
            <summary>
            Tier for pre-Golem enemies, and pre-Hardmode minibosses
            </summary>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.Four">
            <summary>
            Tier for pre-Golem Hardmode minibosses and strong/special enemies (Wraiths and Giant Tortises are here too.)
            </summary>
        </member>
        <member name="P:Aequus.Content.Necromancy.GhostInfo.Five">
            <summary>
            Tier for post-Golem Minibosses and post-ML enemies
            </summary>
        </member>
        <member name="F:Aequus.Content.Necromancy.GhostOutlineRenderer.IDs.Count">
            <summary>
            Use and increase respectively for custom Necromancy Screen Renderer layers.
            </summary>
        </member>
        <member name="M:Aequus.Content.Necromancy.NecromancyDatabase.HandleModCall(Aequus.Aequus,System.Object[])">
            <summary>
            Adds a NecroStats data for an npc index in <see cref="P:Aequus.Content.Necromancy.NecromancyDatabase.NPCs"/>
            <para>Parameter 1: NPC Type (short)</para>
            <para>Parameter 2: Tier (float), <see cref="T:Aequus.Items.Weapons.Summon.Necro.ZombieScepter"/> is tier 1, <see cref="T:Aequus.Items.Weapons.Summon.Necro.Insurgency"/> is tier 4</para>
            <para>Parameter 3 (Optional): View range (float), how close a slave needs to be to an enemy in order for it to target it. Defaults to 800</para>
            <para>Parameter 4+ (Optional): Two paired arguments. One string and one value</para>
            <para>A successful mod call would look like:</para>
            <code>aequus.Call("NecroStats", ModContent.NPCType{...}(), 1f);</code> OR
            <code>aequus.Call("NecroStats", ModContent.NPCType{...}(), 1f, 800f);</code> OR
            <code>aequus.Call("NecroStats", ModContent.NPCType{...}(), 1f, 800f, "PrioritizePlayerMultiplier", 4f);</code>
            <para>Please handle these mod calls in <see cref="M:Terraria.ModLoader.Mod.PostSetupContent"/>. As buff immunities are setup in <see cref="!:Aequus.AddRecipes"/></para>
            </summary>
            <param name="aequus"></param>
            <param name="args"></param>
            <returns>'Success' when correctly handled. 'Failure' when improperly handled</returns>
        </member>
        <member name="M:Aequus.Content.Necromancy.NecromancyDatabase.Get(System.Int32)">
            <summary>
            Attempts to get the data for this NPC ID, otherwise throws an exception. Does not take netIDs into account
            <para>If you are wanting to use a safer method, please use <see cref="M:Aequus.Content.Necromancy.NecromancyDatabase.TryGet(System.Int32,Aequus.Content.Necromancy.GhostInfo@)"/></para>
            </summary>
            <param name="type">the NPC ID.</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.Necromancy.NecromancyDatabase.Get(Terraria.NPC)">
            <summary>
            Attempts to get the data for this NPC ID, otherwise throws an exception. Does not take netIDs into account
            <para>If you are wanting to use a safer method, please use <see cref="M:Aequus.Content.Necromancy.NecromancyDatabase.TryGet(Terraria.NPC,Aequus.Content.Necromancy.GhostInfo@)"/></para>
            </summary>
            <param name="npc">the NPC instance</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.Necromancy.NecromancyDatabase.TryGet(System.Int32,Aequus.Content.Necromancy.GhostInfo@)">
            <summary>
            Tries to get a <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> value using the given NPC Net ID. Returns false if no info exists, and the popped <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> would be useless.
            </summary>
            <param name="netID">The Net ID (Basically the same as npc.type, but is negative for specialized enemies)</param>
            <param name="value">The released <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> value, when this method returns false this is set to default(GhostInfo)</param>
            <returns>Whether or not there is <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> related to this NPC Net ID</returns>
        </member>
        <member name="M:Aequus.Content.Necromancy.NecromancyDatabase.TryGet(Terraria.NPC,Aequus.Content.Necromancy.GhostInfo@)">
            <summary>
            Tries to get a <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> value using the given NPC. Returns false if no info exists, and the popped <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> would be useless.
            </summary>
            <param name="npc">The NPC instance</param>
            <param name="value">The released <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> value, when this method returns false this is set to default(GhostInfo)</param>
            <returns>Whether or not there is <see cref="T:Aequus.Content.Necromancy.GhostInfo"/> related to this NPC Net ID</returns>
        </member>
        <member name="M:Aequus.Content.WorldGeneration.Structures.Add(System.String,Microsoft.Xna.Framework.Point)">
            <summary>
            Adds a structure to the list
            </summary>
            <param name="name">The name of the structure</param>
            <param name="location">The location of the structure in tile coordinates</param>
        </member>
        <member name="M:Aequus.Content.WorldGeneration.Structures.GetLocation(System.String)">
            <summary>
            Gets the location of a structure using a name
            </summary>
            <param name="name">The name of the structure</param>
            <returns></returns>
        </member>
        <member name="P:Aequus.Graphics.AequusEffects.BehindPlayers">
            <summary>
            Use this instead of <see cref="F:Terraria.Main.ParticleSystem_World_BehindPlayers"/>. Due to it not refreshing old modded particles when you build+reload
            </summary>
        </member>
        <member name="P:Aequus.Graphics.AequusEffects.AbovePlayers">
            <summary>
            Use this instead of <see cref="F:Terraria.Main.ParticleSystem_World_OverPlayers"/>. Due to it not refreshing old modded particles when you build+reload
            </summary>
        </member>
        <member name="T:Aequus.Graphics.CameraFocus">
            <summary>
            Manages screen panning
            </summary>
        </member>
        <member name="P:Aequus.Graphics.CameraFocus.Context">
            <summary>
            A context string for the current focus
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.target">
            <summary>
            The target position for the camera in the world
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.cameraPosition">
            <summary>
            The camera's position 
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.priority">
            <summary>
            A priority for determining whether or not a new camera focus can be added
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.speed">
            <summary>
            The speed of the camera
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.cameraProgress">
            <summary>
            The progress of the camera from its original position to its destination
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.hold">
            <summary>
            How long the camera holds in its target position after the caller stops running <see cref="M:Aequus.Graphics.CameraFocus.SetTarget(System.String,Microsoft.Xna.Framework.Vector2,Aequus.Graphics.FocusPriority,System.Single,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Aequus.Graphics.CameraFocus.returning">
            <summary>
            Whether or not the camera is returning
            </summary>
        </member>
        <member name="M:Aequus.Graphics.CameraFocus.SetTarget(System.String,Microsoft.Xna.Framework.Vector2,Aequus.Graphics.FocusPriority,System.Single,System.Int32)">
            <summary>
            Sets the camera target to a position, may return false if your priority is below a current target's priority
            </summary>
            <param name="key">Context key, only really useful for 3rd party mods</param>
            <param name="target">A world coordinate to point the camera at</param>
            <param name="priority">The priority of this camera target. If there is a current camera target, and its priority is above, it will prevent you from setting a target and this method will return false</param>
            <param name="speed">The speed of the camera, the exact time it will get there is: <code>speed / 50</code>So 6 speed means it will get into position in 8 frames. Clamped between 6 and 25</param>
            <param name="hold">How long the camera holds in its target position after the caller stops running <see cref="M:Aequus.Graphics.CameraFocus.SetTarget(System.String,Microsoft.Xna.Framework.Vector2,Aequus.Graphics.FocusPriority,System.Single,System.Int32)"/></param>
            <returns>Whether or not the camera target has been set to a new position. Spamming SetTarget will only return true on the first SetTarget call, and the rest will return false</returns>
        </member>
        <member name="P:Aequus.Graphics.SnowgraveCorpse.OnFreezeNPC">
            <summary>
            Parameter 1: {NPC} - The NPC which is being sudo cloned
            <para>Parameter 2: {NPC} - The clone result</para>
            </summary>
        </member>
        <member name="P:Aequus.Graphics.SnowgraveCorpse.CustomDraw">
            <summary>
            Parameter 1: {NPC} - The NPC which is being sudo cloned
            <para>Parameter 2: {NPC} - The NPC</para>
            </summary>
        </member>
        <member name="P:Aequus.Graphics.SnowgraveCorpse.CustomUpdate">
            <summary>
            Parameter 1: {ABasicParticle} - Will always be FrozenNPC, but for soft reference purposes, this is left as a generic vanilla class.
            <para>Parameter 2: {NPC} - The NPC</para>
            </summary>
        </member>
        <member name="F:Aequus.Items.Accessories.Summon.Sentry.SentrySquid.TurretStaffUsage.customAction">
            <summary>
            Player is the player who is summoning the sentry
            <para>Item is the item used to summon the sentry</para>
            <para>NPC is the target</para>
            <para>.</para>
            <para>returns:</para> 
                Whether it was successful at placing a sentry
            </summary>
        </member>
        <member name="M:Aequus.Items.Consumables.Bait.IModifyCatchFish.ModifyCatchFish(Terraria.DataStructures.FishingAttempt,System.Int32@,System.Int32@,Terraria.AdvancedPopupRequest@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            
            </summary>
            <param name="attempt"></param>
            <param name="itemDrop"></param>
            <param name="npcSpawn"></param>
            <param name="sonar"></param>
            <param name="sonarPosition"></param>
            <returns>Return false to prevent Aequus from running fish checks.</returns>
        </member>
        <member name="M:Aequus.Items.Consumables.Bait.IModifyFishItem.ModifyFishItem(Terraria.Item)">
            <summary>
            
            </summary>
            <param name="fish"></param>
        </member>
        <member name="M:Aequus.Items.Consumables.Bait.IModifyFishAttempt.OnItemRoll(Terraria.Projectile,Terraria.DataStructures.FishingAttempt@)">
            <summary>
            
            </summary>
            <param name="bobber"></param>
            <param name="fisher"></param>
            <returns>Return false to prevent vanilla rolling fish</returns>
        </member>
        <member name="M:Aequus.Items.Consumables.LootBags.Roulettes.RouletteDropRule.#ctor(Aequus.Items.Consumables.LootBags.Roulettes.RouletteBase,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="roulette">An instance of the Roulette, for a better lookup.</param>
            <param name="itemID">The dropped item ID</param>
            <param name="rouletteChoice">The item which needs to be rolled for a 100% drop</param>
            <param name="dropChance">A drop chance of 100% means it will only drop when chosen by the scrolling item list (Since if it already drops 100% of the time, it might as well not be on the list.)</param>
            <param name="amountDroppedMinimum"></param>
            <param name="amountDroppedMaximum"></param>
            <param name="chanceNumerator"></param>
        </member>
        <member name="M:Aequus.Items.Consumables.LootBags.Roulettes.RouletteDropRule.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="rouletteItemID">The Item ID of the roulette</param>
            <param name="itemID">The dropped item ID</param>
            <param name="rouletteChoice">The item which needs to be rolled for a 100% drop</param>
            <param name="dropChance">A drop chance of 100% means it will only drop when chosen by the scrolling item list (Since if it already drops 100% of the time, it might as well not be on the list.)</param>
            <param name="amountDroppedMinimum"></param>
            <param name="amountDroppedMaximum"></param>
            <param name="chanceNumerator"></param>
        </member>
        <member name="P:Aequus.Items.CooldownItem.HasWeaponCooldown">
            <summary>
            Whether or not this weapon has a cooldown effect. Currently only allows the cooldown background to be drawn behind this item when the player has a cooldown
            </summary>
        </member>
        <member name="M:Aequus.Items.ItemHooks.IModifyFishingPower.ModifyFishingPower(Terraria.Player,Aequus.Common.PlayerFishing,Terraria.Item,System.Single@)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="fishing"></param>
            <param name="fishingRod"></param>
            <param name="fishingLevel"></param>
        </member>
        <member name="M:Aequus.Items.ItemHooks.IUpdateItemDye.Player_UpdateItemDye(On.Terraria.Player.orig_UpdateItemDye,Terraria.Player,System.Boolean,System.Boolean,Terraria.Item,Terraria.Item)">
            <summary>
            
            </summary>
            <param name="orig"></param>
            <param name="self"></param>
            <param name="isNotInVanitySlot"></param>
            <param name="isSetToHidden"></param>
            <param name="armorItem">If you are an equipped item, this is you.</param>
            <param name="dyeItem">If you are a dye, this is you.</param>
        </member>
        <member name="T:Aequus.Items.OnlineLinkedItem">
            <summary>
            Currently only used by the Aequus Music mod's music boxes.
            </summary>
        </member>
        <member name="P:Aequus.Items.SentryAccessoriesDatabase.OnAI">
            <summary>
            <para>1) Projectile - the projectile</para>
            <para>2) SantankSentryProjectile/ModProjectile - the projectile's SantankSentryProjectile instance</para>
            <para>3) Item - the accessory</para>
            <para>4) Player - the player owner of both projectiles</para>
            <para>5) AequusPlayer/ModPlayer - the AequusPlayer instance on the player owner</para>
            </summary>
        </member>
        <member name="P:Aequus.Items.SentryAccessoriesDatabase.OnShoot">
            <summary>
            <para>1) IEntitySource - the entity source</para>
            <para>2) Projectile - the projectile</para>
            <para>3) SantankSentryProjectile/ModProjectile - the projectile's SantankSentryProjectile instance</para>
            <para>4) Projectile - the parent projectile, aka shooter</para>
            <para>5) SantankSentryProjectile/ModProjectile - the projectile/shooter's SantankSentryProjectile instance</para>
            <para>6) Item - the accessory</para>
            <para>7) Player - the player owner of both projectiles</para>
            <para>8) AequusPlayer/ModPlayer - the AequusPlayer instance on the player owner</para>
            </summary>
        </member>
        <member name="F:Aequus.NPCs.AIs.LegacyAIManEater.range">
            <summary>
            The range in units the NPC can travel. Defaults to 150
            </summary>
        </member>
        <member name="F:Aequus.NPCs.AIs.LegacyAIManEater.movementSpeed">
            <summary>
            Used to control the movement speed of the NPC. Defaults to 0.035.
            </summary>
        </member>
        <member name="F:Aequus.NPCs.AIs.LegacyAIManEater.speedCap">
            <summary>
            The maximum speed the NPC can travel. Defaults to 3
            </summary>
        </member>
        <member name="F:Aequus.NPCs.AIs.LegacyAIManEater.faceAwayFromConnection">
            <summary>
            In order to make the NPC rotate their sprite like the Fungi Bulbs.
            </summary>
        </member>
        <member name="F:Aequus.NPCs.AIs.LegacyAIManEater.shoots">
            <summary>
            Whether the NPC shoots at all. Defaults to false
            </summary>
        </member>
        <member name="M:Aequus.NPCs.AIs.LegacyAIManEater.CanShoot">
            <summary>
            Whether the NPC can shoot when it is ready and shoots is set to true. Defaults to if it is not in a tile, and has a line to shoot the player 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aequus.NPCs.AIs.LegacyAIManEater.GetShootTimer">
            <summary>
            The maximum time before the NPC shoots. Defaults to 120.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aequus.NPCs.AIs.LegacyAIManEater.Shoot">
            <summary>
            Called when the NPC shoots.
            </summary>
        </member>
        <member name="M:Aequus.NPCs.AIs.LegacyAIManEater.ResetShootTimer(System.Boolean,System.Int32)">
            <summary>
            Defaults to reseting the timer to 0 when hit. And reseting the timer to [Timer max] - 20 when not hit
            </summary>
            <param name="justHit">Whether the NPC was hit. This is the basically exact same as <see cref="F:Terraria.NPC.justHit"/> just passed as a parameter</param>
            <param name="current"></param>
            <returns>The new timer</returns>
        </member>
        <member name="M:Aequus.NPCs.AIs.LegacyAIManEater.PreDrawChain(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Color@)">
            <summary>
            Allows you to modify how the chain is drawn
            </summary>
            <param name="spriteBatch">The sprite batch</param>
            <param name="screenPos"></param>
            <param name="drawColor"></param>
            <param name="chainTexture">The texture</param>
            <param name="frame">The texture</param>
            <param name="_drawColor">The color the entire chain is drawn in</param>
            <returns>Whether to draw the chain</returns>
        </member>
        <member name="T:Aequus.NPCs.BestiaryBuilder">
            <summary>
            Helper class for setting up bestiary entries
            </summary>
        </member>
        <member name="M:Aequus.NPCs.Boss.OmegaStarite.Ring.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a Ring through a net package
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Aequus.NPCs.ShopQuotes.QuoteDatabase.GetNPC(System.Int32)">
            <summary>
            Gets an NPC entry. If one doesn't exist already, it will be added to the database.
            </summary>
            <param name="npc"></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.NPCs.ShopQuotes.QuoteDatabase.HandleModCall(Aequus.Aequus,System.Object[])">
            <summary>
            Adds shop quote data for an npc
            <para>Parameter 1: NPC Type (<see cref="T:System.Int32"/>)</para>
            <para>Parameter 2: Key (<see cref="T:System.String"/>)</para>
            <para>Parameter 2 (Alternative): Mod (<see cref="T:Terraria.ModLoader.Mod"/>) Would generate a key which looks like: <code>Mods.MYMODNAME.Chat.(NPCKEY).ShopQuotes.(ITEMKEY)</code></para>
            <para>Parameter 3: Item Type (<see cref="T:System.Int32"/>) OR (<see cref="T:System.Int32"/>[])</para>
            <para>To make a town npc use a specific quote color:</para>
            <para>Parameter 1: NPC Type (<see cref="T:System.Int32"/>)</para>
            <para>Parameter 2: Color (<see cref="T:Microsoft.Xna.Framework.Color"/>)</para>
            <para>A successful mod call would look like:</para>
            <code>aequus.Call("AddShopQuote", <see cref="T:Terraria.ID.NPCID"/>, <see cref="T:Microsoft.Xna.Framework.Color"/>);</code> OR
            <code>aequus.Call("AddShopQuote", <see cref="T:Terraria.ID.NPCID"/>, this, <see cref="T:Terraria.ID.ItemID"/>);</code> OR
            <code>aequus.Call("AddShopQuote", <see cref="T:Terraria.ID.NPCID"/>, "This is text. I can also use language keys here.", <see cref="T:Terraria.ID.ItemID"/>);</code>
            <code>aequus.Call("AddShopQuote", <see cref="T:Terraria.ID.NPCID"/>, "This is text. I can also use language keys here.", new int[] { <see cref="T:Terraria.ID.ItemID"/>, });</code>
            <para>Please handle these mod calls in <see cref="M:Terraria.ModLoader.Mod.PostSetupContent"/>.</para>
            </summary>
            <param name="aequus"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceItemUsed">
            <summary>
            The item source used to spawn this projectile. Defaults to 0 (<see cref="F:Terraria.ID.ItemID.None"/>)
            </summary>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceAmmoUsed">
            <summary>
            The ammo source used to spawn this projectile. Defaults to 0 (<see cref="F:Terraria.ID.ItemID.None"/>)
            </summary>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceNPC">
            <summary>
            The npc index which spawned this projectile. Be aware the NPC may have died or was swapped with another, so this value is useless for now. Defaults to -1.
            </summary>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceProjType">
            <summary>
            The ID of the projectile which spawned this projectile. Defaults to 0 (<see cref="F:Terraria.ID.ProjectileID.None"/>).
            </summary>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceProjIdentity">
            <summary>
            The identity (<see cref="F:Terraria.Projectile.identity"/>) of the projectile which spawned this projectile. Defaults to -1.
            </summary>
        </member>
        <member name="F:Aequus.Projectiles.AequusProjectile.sourceProj">
            <summary>
            An approximated index of the projectile which spawned this projectile. Defaults to -1.
            </summary>
        </member>
        <member name="P:Aequus.Projectiles.Melee.SwordProjectileBaseCircular.AltFunctionSpeedup">
            <summary>
            Multiplies the use time by this value when the player is using the right click function of the item. Lower numbers means faster speed
            </summary>
        </member>
        <member name="P:Aequus.Projectiles.Melee.SwordProjectileBaseCircular.AltFunctionScale">
            <summary>
            Multiplies the scale by this value when the player is using the right click function of the item. Higher numbers means larger weapon
            </summary>
        </member>
        <member name="P:Aequus.Projectiles.Melee.SwordProjectileBaseCircular.AltFunctionHitboxScale">
            <summary>
            Multiplies the hitbox's dimensions by this value when the player is using the right click function of the item. Higher numbers means larger hitbox dimensions
            </summary>
        </member>
        <member name="M:Aequus.Projectiles.PlayerAttachedProjBase.GetOwnerValues(Terraria.Player@,Aequus.AequusPlayer@,System.Int32@,Aequus.Projectiles.SentryAccessoriesProj@)">
            <summary>
            Gets an owner. Returns a santank dummy player if the projOwner is greater than -1.
            </summary>
            <param name="player">The owner of this projectile.</param>
            <param name="aequus">The "AequusPlayer" instance on the player.</param>
            <param name="projOwner">The "Projectile owner". This defaults to -1 unless this projectile is spawned with a projectile owner, then it returns their index in <see cref="F:Terraria.Main.projectile"/></param>
            <param name="santank">The Projectile owner's <see cref="T:Aequus.Projectiles.SentryAccessoriesProj"/> instance. Defaults to null unless <paramref name="projOwner"/> is greater than -1.</param>
        </member>
        <member name="M:Aequus.Tiles.RecyclingMachineTile.GetTileEntity(System.Int32,System.Int32)">
            <summary>
            Attempts to get the recycling machine Tile Entity instance. Returns null if none is found.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
    </members>
</doc>
