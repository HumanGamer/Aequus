<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aequus</name>
    </assembly>
    <members>
        <member name="T:Aequus.AequusHelpers">
            <summary>
            A helper class which contains many useful methods
            </summary>
        </member>
        <member name="F:Aequus.AequusHelpers.iterations">
            <summary>
            A static integer used for counting how many iterations for an iterative process has occured. Use this to prevent infinite loops, and always be sure to reset to 0 afterwards.
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.Main_dayTime">
            <summary>
            Caches <see cref="F:Terraria.Main.dayTime"/>.
            </summary>
        </member>
        <member name="P:Aequus.AequusHelpers.HasMouseItem">
            <summary>
            Determines whether or not the mouse has an item
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.permMoro">
            <summary>
            Enabled by <see cref="T:Aequus.Items.Consumables.Moro"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.blueFire">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.Debuffs.BlueFire"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.pickBreak">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.Debuffs.PickBreak"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.spaceSquidPet">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.Pets.SpaceSquidBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.familiarPet">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.Pets.FamiliarBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.omegaStaritePet">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.Pets.OmegaStariteBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.resistHeat">
            <summary>
            Applied by <see cref="T:Aequus.Buffs.FrostBuff"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.eventGaleStreams">
            <summary>
            Whether or not the player is in the Gale Streams event. Updated using <see cref="M:Aequus.AequusPlayer.CheckEventGaleStreams"/> in <see cref="M:Aequus.AequusPlayer.PreUpdate"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.closestEnemy">
            <summary>
            The closest 'enemy' NPC to the player. Updated in <see cref="M:Aequus.AequusPlayer.PostUpdate"/> / <see cref="M:Aequus.AequusPlayer.PostUpdate_CheckDanger"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.autoSentry">
            <summary>
            Applied by <see cref="T:Aequus.Items.Accessories.Summon.SentrySquid"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.frostburnSentry">
            <summary>
            Used by <see cref="T:Aequus.Items.Accessories.Summon.IcebergKraken"/>. Gives all sentries and their projectiles a 1/6 chance to inflict the Frostburn debuff
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.glowCore">
            <summary>
            Used by <see cref="T:Aequus.Items.Accessories.GlowCore"/>. All player owned projectiles also check this in order to decide if they should glow.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.lootLuck">
            <summary>
            Used to increase droprates. Rerolls the drop (amt of lootluck) times, if there is a decimal left, then it has a (lootluck decimal) chance of rerolling again.
            <para>Used by <see cref="T:Aequus.Items.Accessories.GrandReward"/></para> 
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.forceDaytime">
            <summary>
            0 = no force, 1 = force day, 2 = force night
            <para>Used by <see cref="T:Aequus.Buffs.NoonBuff"/> and set to 1</para>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.wearingSummonHelmet">
            <summary>
            Set to true by <see cref="T:Aequus.Items.Armor.PassiveSummon.DartTrapHat"/>, <see cref="T:Aequus.Items.Armor.PassiveSummon.SuperDartTrapHat"/>, <see cref="T:Aequus.Items.Armor.PassiveSummon.FlowerCrown"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.summonHelmetTimer">
            <summary>
            Used by summon helmets (<see cref="T:Aequus.Items.Armor.PassiveSummon.DartTrapHat"/>, <see cref="T:Aequus.Items.Armor.PassiveSummon.SuperDartTrapHat"/>, <see cref="T:Aequus.Items.Armor.PassiveSummon.FlowerCrown"/>) to time projectile spawns and such.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.lastSelectedItem">
            <summary>
            Tracks <see cref="F:Terraria.Player.selectedItem"/>, updated in <see cref="M:Aequus.AequusPlayer.PostItemCheck"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCooldownMax">
            <summary>
            When a new cooldown is applied, this gets set to the duration of the cooldown. Does not tick down unlike <see cref="F:Aequus.AequusPlayer.itemCooldown"/>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCooldown">
            <summary>
            When above 0, the cooldown is active. Ticks down by 1 every player update.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemCombo">
            <summary>
            When above 0, you are in a combo. Ticks down by 1 every player update.
            <para>Item "combos" are used for determining what type of item action to use.</para>
            <para>A usage example would be a weapon with a 3 swing pattern. Each swing will increase the combo meter by 60, and when it becomes greater than 120, reset to 0.</para>
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemUsage">
            <summary>
            Increments when the player uses an item. Does not increment when the player is using the alt function of an item.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.itemSwitch">
            <summary>
            A short lived timer which gets set to 30 when the player has a different selected item.
            </summary>
        </member>
        <member name="F:Aequus.AequusPlayer.interactionCooldown">
            <summary>
            Used to prevent players from spam interacting with special objects which may have important networking actions which need to be awaited. Ticks down by 1 every player update.
            </summary>
        </member>
        <member name="P:Aequus.AequusPlayer.HasCooldown">
            <summary>
            Helper for whether or not the player currently has a cooldown
            </summary>
        </member>
        <member name="P:Aequus.AequusPlayer.InDanger">
            <summary>
            Helper for whether or not the player is in danger
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.CheckEventGaleStreams">
            <summary>
            Used to update <see cref="F:Aequus.AequusPlayer.eventGaleStreams"/>
            </summary>
            <returns>Whether the Gale Streams event is currently active, and the player is in space</returns>
        </member>
        <member name="M:Aequus.AequusPlayer.PostUpdate_CheckDanger">
            <summary>
            Finds the closest enemy to the player, and caches its index in <see cref="F:Terraria.Main.npc"/>
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.UpdateAutoSentry">
            <summary>
            Attempts to place a sentry down near the <see cref="T:Terraria.NPC"/> at <see cref="F:Aequus.AequusPlayer.closestEnemy"/>'s index. Doesn't do anything if the index is -1, the enemy is not active, or the player has no turret slots. Runs after <see cref="M:Aequus.AequusPlayer.PostUpdate_CheckDanger"/>
            </summary>
        </member>
        <member name="M:Aequus.AequusPlayer.AutoSentry_GetUsableSentryStaff">
            <summary>
            Determines an item to use as a Sentry Staff for <see cref="M:Aequus.AequusPlayer.UpdateAutoSentry"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aequus.AequusPlayer.PreDraw(Terraria.DataStructures.PlayerDrawSet@)">
            <summary>
            Called right before all player layers have been drawn
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Aequus.AequusPlayer.PostDraw(Terraria.DataStructures.PlayerDrawSet@)">
            <summary>
            Called right after all player layers have been drawn
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Aequus.AequusPlayer.SetCooldown(System.Int32,System.Boolean,Terraria.Item)">
            <summary>
            Sets a cooldown for the player. If the cooldown value provided is less than the player's currently active cooldown, this does nothing.
            <para>Use in combination with <see cref="P:Aequus.AequusPlayer.HasCooldown"/></para>
            </summary>
            <param name="cooldown">The amount of time the cooldown lasts in game ticks.</param>
            <param name="ignoreStats">Whether or not to ignore cooldown stats and effects. Setting this to true will prevent them from effecting this cooldown</param>
            <param name="itemReference"></param>
        </member>
        <member name="M:Aequus.AequusWorld.OreTiers">
            <summary>
            
            </summary>
            <returns>A bitsbyte instance where 0 is copper, 1 is iron, 2 is silver, 3 is gold. When they are false, they are the alternate world ore.</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasCobalt">
            <summary>
            
            </summary>
            <returns>true if the world has cobalt, false if the world has palladium, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasMythril">
            <summary>
            
            </summary>
            <returns>true if the world has mythril, false if the world has orichalcum, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="M:Aequus.AequusWorld.HasAdamantite">
            <summary>
            
            </summary>
            <returns>true if the world has adamantite, false if the world has titanium, null if the world isn't in hardmode or has neither</returns>
        </member>
        <member name="T:Aequus.Buffs.Pets.FamiliarBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Misc.Pets.FamiliarPickaxe"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.OmegaStariteBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Misc.Pets.DragonBall"/>
            </summary>
        </member>
        <member name="T:Aequus.Buffs.Pets.SpaceSquidBuff">
            <summary>
            Applied by <see cref="T:Aequus.Items.Misc.Pets.ToySpaceGun"/>
            </summary>
        </member>
        <member name="M:Aequus.Common.Catalogues.ItemModuleTypes.GetReservedID">
            <summary>
            Gives you an ID to classify a specific item module type
            <para>
            It may be confusing to wrap around your head what this ID is used for, but this example should help:
            <code>public static int MyCustomModuleType;</code>
            <code>...Load()</code>
            <code>MyCustomEquipType = ItemModuleType.GetReservedID();</code>
            <code>...SetStaticDefaults() in a Grappling Hook Item...</code>
            <code>ModularItemManager.Catalogue.AllowEquipType(Type, MyCustomEquipType);</code>
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aequus.Common.Players.HyperCrystalPlayer">
            <summary>
            Used by <see cref="T:Aequus.Items.Accessories.HyperCrystal"/>
            </summary>
        </member>
        <member name="T:Aequus.Common.Players.MendshroomPlayer">
            <summary>
            Used by <see cref="T:Aequus.Items.Accessories.Mendshroom"/>
            </summary>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.IHookBarbData.ProjPreAI(Terraria.Projectile,System.Int32,Terraria.Player,Aequus.AequusPlayer)">
            <summary>
            Ran in <see cref="M:Terraria.ModLoader.GlobalProjectile.PreAI(Terraria.Projectile)"/>
            </summary>
            <param name="projectile"></param>
            <param name="barbEquipType"></param>
            <param name="player"></param>
            <param name="aequus"></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.IHookBarbData.ProjAI(Terraria.Projectile,System.Int32,Terraria.Player,Aequus.AequusPlayer)">
            <summary>
            Ran in <see cref="M:Terraria.ModLoader.GlobalProjectile.AI(Terraria.Projectile)"/>
            </summary>
            <param name="projectile"></param>
            <param name="barbEquipType"></param>
            <param name="player"></param>
            <param name="aequus"></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.IHookBarbData.ProjPostAI(Terraria.Projectile,System.Int32,Terraria.Player,Aequus.AequusPlayer)">
            <summary>
            Ran in <see cref="M:Terraria.ModLoader.GlobalProjectile.PostAI(Terraria.Projectile)"/>
            </summary>
            <param name="projectile"></param>
            <param name="barbEquipType"></param>
            <param name="player"></param>
            <param name="aequus"></param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.NPCCollisionHookBarbData.ProjOnCollideNPC(Terraria.Projectile,Terraria.NPC)">
            <summary>
            Checked in <see cref="M:Terraria.ModLoader.GlobalProjectile.PostAI(Terraria.Projectile)"/>
            </summary>
            <param name="projectile"></param>
            <param name="npc">The NPC that is colliding with this hook</param>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.NPCPlayerPVPCollisionHookBarbData.ProjOnCollidePlayer(Terraria.Projectile,Terraria.Player)">
            <summary>
            Checked in <see cref="M:Terraria.ModLoader.GlobalProjectile.PostAI(Terraria.Projectile)"/>
            </summary>
            <param name="projectile"></param>
            <param name="player">The player that is colliding with this hook. Does not check if they are hostile and a part of an opposing team.</param>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.RegisterHookBarb(System.Int32,Aequus.Content.ItemModules.GrapplingHookModules.IHookBarbData)">
            <summary>
            Registers a hook barb for a given item.
            </summary>
            <param name="item">Item ID</param>
            <param name="data">Data statically stored for this item type</param>
            <returns></returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.GetHookBarb(System.Int32)">
            <summary>
            
            </summary>
            <param name="item">Item ID</param>
            <returns>The generic hook barb data for this item. If there is none, throws an error</returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.GetHookBarb``1(System.Int32)">
            <summary>
            
            </summary>
            <param name="item">Item ID</param>
            <returns>The specific hook barb data for this item. If there is none or it's an incompatible type, throws an error</returns>
        </member>
        <member name="M:Aequus.Content.ItemModules.GrapplingHookModules.TryGetHookBarb(System.Int32,Aequus.Content.ItemModules.GrapplingHookModules.IHookBarbData@)">
            <summary>
            
            </summary>
            <param name="item">Item ID</param>
            <param name="value">An output value. When this method returns true, this is the data for the hook barb, otherwise it is useless data</param>
            <returns>The generic hook barb data for this item</returns>
        </member>
        <member name="F:Aequus.Graphics.FrozenNPCEffect.Blacklist.OnFreezeNPC">
            <summary>
            Parameter 1: {NPC} - The NPC which is being sudo cloned
            <para>Parameter 2: {NPC} - The clone result</para>
            </summary>
        </member>
        <member name="F:Aequus.Graphics.FrozenNPCEffect.Blacklist.CustomDraw">
            <summary>
            Parameter 1: {NPC} - The NPC which is being sudo cloned
            <para>Parameter 2: {NPC} - The NPC</para>
            </summary>
        </member>
        <member name="F:Aequus.Graphics.FrozenNPCEffect.Blacklist.CustomUpdate">
            <summary>
            Parameter 1: {ABasicParticle} - Will always be FrozenNPC, but for soft reference purposes, this is left as a generic vanilla class.
            <para>Parameter 2: {NPC} - The NPC</para>
            </summary>
        </member>
        <member name="P:Aequus.Items.CooldownItems.HasWeaponCooldown">
            <summary>
            Whether or not this weapon has a cooldown effect. Currently only allows the cooldown background to be drawn behind this item when the player has a cooldown
            </summary>
        </member>
        <member name="F:Aequus.Items.ItemsCatalogue.SentryStaffUsage.customAction">
            <summary>
            Player is the player who is summoning the sentry
            <para>Item is the item used to summon the sentry</para>
            <para>NPC is the target</para>
            <para>.</para>
            <para>returns:</para> 
                Whether it was successful at placing a sentry
            </summary>
        </member>
        <member name="T:Aequus.Items.OnlineLinkedItem">
            <summary>
            Currently only used by the Aequus Music mod's music boxes.
            </summary>
        </member>
        <member name="T:Aequus.NPCs.BestiaryBuilder">
            <summary>
            Helper class for setting up bestiary entries
            </summary>
        </member>
        <member name="M:Aequus.NPCs.Boss.OmegaStarite.Ring.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a Ring through a net package
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Aequus.Projectiles.Melee.DopeSwordBase.AltFunctionSpeedup">
            <summary>
            Multiplies the use time by this value when the player is using the right click function of the item. Lower numbers means faster speed
            </summary>
        </member>
        <member name="P:Aequus.Projectiles.Melee.DopeSwordBase.AltFunctionScale">
            <summary>
            Multiplies the scale by this value when the player is using the right click function of the item. Higher numbers means larger weapon
            </summary>
        </member>
        <member name="P:Aequus.Projectiles.Melee.DopeSwordBase.AltFunctionHitboxScale">
            <summary>
            Multiplies the hitbox's dimensions by this value when the player is using the right click function of the item. Higher numbers means larger hitbox dimensions
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.CrabsonBoss">
            <summary>
            Used by <see cref="T:Aequus.NPCs.Boss.Crabson"/>
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.OmegaStariteBoss">
            <summary>
            Used by <see cref="T:Aequus.NPCs.Boss.OmegaStarite"/>
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.DustDevilBoss">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.CrabCreviceBiome">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.CrabSeasonEvent">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.GlimmerEvent">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:Aequus.Sounds.MusicData.GaleStreamsEvent">
            <summary>
            Used when <see cref="F:Aequus.AequusPlayer.eventGaleStreams"/> is true
            </summary>
        </member>
    </members>
</doc>
